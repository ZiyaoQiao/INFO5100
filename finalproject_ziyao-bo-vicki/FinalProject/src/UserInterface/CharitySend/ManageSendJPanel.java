/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CharitySend;

import EcoSystem.EcoSystem;
import Enterprise.CharityEnterprise;
import Enterprise.DeliveryEnterprise;
import Enterprise.Enterprise;
import Network.Network;
import Person.Goods;
import Person.GoodsList;
import Person.UserAccount;
import UserInterface.CharityReceive.ViewGoodsOrderJPanel;
import WorkRequest.SendWorkRequest;
import WorkRequest.TransportWorkRequest;
import WorkRequest.WorkQueue;
import WorkRequest.WorkRequest;
import WorkRequest.WorkRequest.Type;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yanfei
 */
public class ManageSendJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSendJPanel
     */
    JPanel userProcessContainer;
    EcoSystem system;
    Enterprise enterprise;
    Network network;
    UserAccount account;
    
    boolean isTrue;
    
    public ManageSendJPanel(JPanel userProcessContainer,UserAccount account, Enterprise enterprise, Network network, EcoSystem business) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        system=business;
        this.account = account;
        this.enterprise=enterprise;
        this.network = network;
        isTrue = true;
        valueLabel1.setText(enterprise.getName());
        populateTable();
        populateComboBox();
    }

    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel) workRequestJTable.getModel();
        dtm.setRowCount(0);
        
        if(enterprise instanceof CharityEnterprise){
            for(WorkRequest workRequest:((CharityEnterprise)enterprise).getWorkQueue().getWorkRequestList()){
                if(workRequest instanceof SendWorkRequest){
                    SendWorkRequest request = (SendWorkRequest)workRequest;
                    if(request.getStatus() != 1 || request.getRequest() != 2){
                    }else{
                        Object[] row = new Object[4];
                        row[0] = request;
                        row[1] = request.getSender().getUsername();
                        row[2] = request.getStatus();
                        row[3] = request.getRequestDate();
                        dtm.addRow(row);                
                    }
                }
            }
        }
    }
    
    public void populateComboBox(){
        DeliveryComboBox.removeAllItems();
        for(Enterprise ent: network.getEnterpriseDirectory().getEnterpriseList()){
            if(ent instanceof DeliveryEnterprise){
                DeliveryComboBox.addItem(ent);
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnView = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        enterpriseLabel1 = new javax.swing.JLabel();
        valueLabel1 = new javax.swing.JLabel();
        btnSend = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnReject = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        DeliveryComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 470, 100, -1));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 470, -1, -1));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Goods Order ", "Receiver", "Status", "Request Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 120, 640, 190));

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, -1, -1));

        enterpriseLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel1.setText("EnterPrise :");
        add(enterpriseLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 127, 30));

        valueLabel1.setText("<value>");
        add(valueLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 158, 26));

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });
        add(btnSend, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 370, 100, -1));

        jLabel1.setText("Send Request");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 370, 155, -1));

        jLabel2.setText("Reject Request");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 420, -1, -1));

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        add(btnReject, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 420, 100, -1));

        jLabel3.setText("Look into Request Detail");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 470, -1, -1));

        DeliveryComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(DeliveryComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 320, 100, -1));

        jLabel4.setText("Select Delivery:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 320, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Admin/6783831-cute-backgrounds.jpg"))); // NOI18N
        jLabel5.setText("jLabel5");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 800));
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = workRequestJTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row from table first!","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            WorkRequest workRequest = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            GoodsList goodsList = workRequest.getGoodsList();
            
            ViewGoodsOrderJPanel viewGoodsOrderJPanel = new ViewGoodsOrderJPanel(userProcessContainer,system,goodsList);
            userProcessContainer.add("viewGoodsOrderJPanel", viewGoodsOrderJPanel);

            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row from table first!","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            WorkRequest workRequest = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            if(workRequest instanceof SendWorkRequest){
                ((SendWorkRequest)workRequest).setRejected(1);
                workRequest.setStatus(2);
            }
            JOptionPane.showMessageDialog(null, "Rejected!");
        }
        
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_btnRefreshActionPerformed
    public boolean validation(int row){
        WorkRequest workRequest = (WorkRequest) workRequestJTable.getValueAt(row, 0);
        GoodsList goodsList = workRequest.getGoodsList();
        boolean validate = true;
        //boolean isNull = true;
        
        for(Goods goods: goodsList.getGoodsList()){
            Goods tmp = null;
            if(goods.getLinkGoods() == null){
                tmp = goods;
                ArrayList<Goods> goodses = new ArrayList<>();
                for(GoodsList gl : ((CharityEnterprise)enterprise).getGoodsList()){
                    for(Goods g: gl.getGoodsList()){
                        if(g.getName().equals(tmp.getName())){
                            goodses.add(g);
                        }
                    }    
                }
                if(goodses.size() == 0){
                    validate = false;
                    return validate;
                }else{
                    int n = 0;
                    for(Goods g: goodses){
                        n += g.getNum();
                    }
                    if(n < tmp.getNum()){
                        validate = false;
                        return validate;
                    }
                }
            }
            else{
                tmp = goods.getLinkGoods();
                if(tmp.getNum() < goods.getNum())
                    return false;
//                for(GoodsList gl : ((CharityEnterprise)enterprise).getGoodsList()){
//                    for(Goods g: gl.getGoodsList()){
//                        if(g.equals(tmp)){
//                            isNull = false;
//                            if(g.getNum() < goods.getNum()){
//                                validate = false;
//                                return validate;
//                            }
//                        }
//                    }
//                }
            }
        }
        return validate;
            
    }
    
    public void removeGoods(int row){
        isTrue = true;
        
        WorkRequest workRequest = (WorkRequest) workRequestJTable.getValueAt(row, 0);
        GoodsList goodsList = workRequest.getGoodsList();
        
        for(Goods goods: goodsList.getGoodsList()){
            Goods tmp = null;
            if(goods.getLinkGoods() == null){
                tmp = goods;
                class Tuple{
                    Goods goods;
                    GoodsList list;
                }
                ArrayList<Tuple> goodses = new ArrayList<>();
                for(GoodsList gl : ((CharityEnterprise)enterprise).getGoodsList()){
                    for(Goods g: gl.getGoodsList()){
                        if(g.getName().equals(tmp.getName())){
                            Tuple go = new Tuple();
                            go.goods = g;
                            go.list = gl;
                            goodses.add(go);
                        }
                    }    
                }
                int require = tmp.getNum();
                int i = 0;
                while(require > 0){
                    if(goods.getCondition() == 0||goods.getSize() == 0||goods.getWeight() == 0||goods.getX() == 0||goods.getY() == 0||goods.getZ() == 0||goods.getEstimatedPrice() == 0){
                        Goods g = goodses.get(i).goods;
                        goods.setCondition(g.getCondition());
                        goods.setEstimatedPrice(g.getEstimatedPrice());
                        goods.setSize(g.getSize());
                        goods.setX(g.getX());
                        goods.setY(g.getY());
                        goods.setZ(g.getZ());
                        goods.setSize(g.getSize());
                        goods.setWeight(g.getWeight());
                    }
                    if(goodses.get(i).goods.getNum() == 0){
                        goodses.get(i).list.getGoodsList().remove(goodses.get(i).goods);
                        i++;
                    }
                    goodses.get(i).goods.setNum(goodses.get(i).goods.getNum() - 1);
                    require --;
                }
            }
            else{
                tmp = goods.getLinkGoods();
                tmp.setNum(tmp.getNum() - goods.getNum());
                goods.setCondition(tmp.getCondition());
                goods.setEstimatedPrice(tmp.getEstimatedPrice());
                goods.setSize(tmp.getSize());
                goods.setX(tmp.getX());
                goods.setY(tmp.getY());
                goods.setZ(tmp.getZ());
                goods.setSize(tmp.getSize());
                goods.setWeight(tmp.getWeight());
//                for(GoodsList gl : ((CharityEnterprise)enterprise).getGoodsList()){
//                    for(Goods g: gl.getGoodsList()){
//                        if(g.getName().equals(tmp.getName())){
//                            int number=g.getNum();
//                            boolean isMinus = false;
//
//                            if(number-goods.getNum()<0){
//                                isMinus = true;
//                                isTrue = false;
//                            }
//
//                            if(isMinus){
//                                JOptionPane.showMessageDialog(null, "The request number is bigger than the number in inventory");
//                                break;
//                            }else{
//                                number=number-goods.getNum();
//                                g.setNum(number);//remove goods from inventory (decline the sum of goods)
//
//
//                                goods.setCondition(g.getCondition());
//                                goods.setEstimatedPrice(g.getEstimatedPrice());
//                                goods.setSize(g.getSize());
//                                goods.setX(g.getX());
//                                goods.setY(g.getY());
//                                goods.setZ(g.getZ());
//                                goods.setWeight(g.getWeight());
//                            }
//
//                        }
//                    }
//                }
            }
        }
    }
    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        Enterprise delivery = (Enterprise)DeliveryComboBox.getSelectedItem();
        if(selectedRow<0 ){
            JOptionPane.showMessageDialog(null, "Please select a row from table first!","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(!validation(selectedRow) || delivery == null){
                JOptionPane.showMessageDialog(null, "error!");
            }else{
                WorkRequest workRequest = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
                if(workRequest instanceof SendWorkRequest){
                    if(((CharityEnterprise)enterprise).getSendList() == null){
                         ((CharityEnterprise)enterprise).setSendList(new WorkQueue());
                    }
                    
                    boolean indexValid = true;
                
                    if(workRequest.getSender().getPerson().getEngelsCoefficient()>0.59){
                        if(workRequest.getSender().getRequestIndex()-workRequest.getSender().getDonateIndex()>5){
                            indexValid = false;
                        }
                    }else if(workRequest.getSender().getPerson().getEngelsCoefficient()<=0.59&&workRequest.getSender().getPerson().getEngelsCoefficient()>=0.5){
                        if(workRequest.getSender().getRequestIndex()-workRequest.getSender().getDonateIndex()>3){
                            indexValid = false;
                        }
                    }else if(workRequest.getSender().getPerson().getEngelsCoefficient()>=0.3&&workRequest.getSender().getPerson().getEngelsCoefficient()<0.5){
                        if(workRequest.getSender().getRequestIndex()-workRequest.getSender().getDonateIndex()>3){
                            indexValid = false;
                        }
                    }else if(workRequest.getSender().getPerson().getEngelsCoefficient()<0.3){
                        if(workRequest.getSender().getRequestIndex()-workRequest.getSender().getDonateIndex()>2){
                            indexValid = false;
                        }
                    }
                    
                    
                    if(indexValid){
                        ((CharityEnterprise)enterprise).getSendList().getWorkRequestList().add(workRequest);
                        ((SendWorkRequest)workRequest).setStatus(2);
                    
                        removeGoods(selectedRow);
                    
                        TransportWorkRequest request = new TransportWorkRequest();
                    
                        request.setLinkRequest((SendWorkRequest)workRequest);
                        request.setFromEnterprise(enterprise);
                        request.setGoodsList(workRequest.getGoodsList());
                        request.setReceiver(workRequest.getSender());
                        request.setRequestDate(new Date());
                        request.setSender(account);
                        request.setStatus(1);
                        request.setTransportType(1);
                        request.setToEnterprise(workRequest.getFromEnterprise());
                        request.setFromOrganization(account.getOrganization());
                        request.setToOrganization(workRequest.getFromOrganization());
                        request.setTransportType(1);
                        ((CharityEnterprise)enterprise).getTransactionList().getWorkRequestList().add(request);
                        delivery.getWorkQueue().getWorkRequestList().add(request);
                    
                        workRequest.getSender().setRequestIndex(workRequest.getSender().getRequestIndex()+1);
                        JOptionPane.showMessageDialog(null, "Send Complete!");
                        populateTable();
                    }else{
                    JOptionPane.showMessageDialog(null, "This person's request is too much!");
                    } 
                
                    
                    
                    
                }
            }
        }
    }//GEN-LAST:event_btnSendActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox DeliveryComboBox;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReject;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel valueLabel1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
