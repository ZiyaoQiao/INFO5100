/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Citizen;

import EcoSystem.EcoSystem;
import Enterprise.Enterprise;
import Network.Network;
import Person.UserAccount;
import UserInterface.CharityReceive.ViewGoodsOrderJPanel;
import WorkRequest.SendWorkRequest;
import WorkRequest.TransportWorkRequest;
import WorkRequest.WorkRequest;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author qiaoz
 */
public class HistoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HistoryJPanel
     */
    JPanel userProcessContainer; 
    EcoSystem system;
    Network network;
    Enterprise enterprise;
    UserAccount account;
    ArrayList<WorkRequest> list;
    HashMap<WorkRequest, Integer> map;
    /**
     * Creates new form CitizenWorkAreaJPanel
     */
    public HistoryJPanel(JPanel userProcessContainer,UserAccount account, Enterprise enterprise, Network network, EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.system=system;
        this.network = network;
        this.enterprise = enterprise;
        this.account = account;
        list = new ArrayList<WorkRequest>();
        map = new HashMap<WorkRequest, Integer>();
        analyse();
        populate();
    }
    
    public void analyse(){
        list = new ArrayList<WorkRequest>();
        map = new HashMap<WorkRequest, Integer>();
        for(WorkRequest request: account.getWorkQueue().getWorkRequestList()){
            if(request instanceof SendWorkRequest){
                list.add(request);
                if(((SendWorkRequest) request).getRequest() == 1){
                    if(request.getStatus() == 2){
                        map.put(request, 1);
                    }else{
                        map.put(request, 0);
                    }
                }else{
                    map.put(request, 0);
                }
            }else if(request instanceof TransportWorkRequest){
                if(((TransportWorkRequest) request).getLinkRequest() != null){
                    map.put(((TransportWorkRequest) request).getLinkRequest(), 1);
                }
            }
        }
    }

    public void populate(){
        DefaultTableModel model = (DefaultTableModel)DonateHistoryTable.getModel();
        model.setRowCount(0);
        DefaultTableModel modelReceive = (DefaultTableModel)ReceiveHistoryTable.getModel();
        modelReceive.setRowCount(0);
        for(WorkRequest request: list){
            if(request instanceof SendWorkRequest){
                if(((SendWorkRequest) request).getRequest() == 1){
//                    boolean receive = false;
//                    if(map.get(request) == 1){
//                        receive = true;
//                    }
                    Object[] row = new Object[4];
                    row[0] = request;
                    row[1] = ((SendWorkRequest)request).getRequest();
                    row[2] = request.getStatus();
                    if(((SendWorkRequest) request).getRejected()== 1){
                        row[3] = false;
                        model.addRow(row);
                    }else{
                        row[3] = true;
                        model.addRow(row);
                    }
                }else if(((SendWorkRequest) request).getRequest() == 2){
//                    boolean receive = false;
//                    if(map.get(request) == 1){
//                        receive = true;
//                    }
                    Object[] row = new Object[4];
                    row[0] = request;
                    row[1] = ((SendWorkRequest)request).getRequest();
                    row[2] = request.getStatus();
                    if(((SendWorkRequest) request).getRejected()== 1){
                        row[3] = false;
                        modelReceive.addRow(row);
                    }else if(map.get(request) == 1){
                        row[3] = true;
                        modelReceive.addRow(row);
                    }else{
                        row[3] = false;
                        modelReceive.addRow(row);
                    }
                }

            }
            }

        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ReceiveHistoryTable = new javax.swing.JTable();
        BackBtn = new javax.swing.JButton();
        ViewReceiveBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        DonateHistoryTable = new javax.swing.JTable();
        ViewDonateBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        withdrawDonateBtn = new javax.swing.JButton();
        withdrawRequestBtn = new javax.swing.JButton();
        PinnedBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(null);

        ReceiveHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Type", "Status", "Received"
            }
        ));
        jScrollPane1.setViewportView(ReceiveHistoryTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(220, 380, 533, 158);

        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });
        add(BackBtn);
        BackBtn.setBounds(80, 550, 59, 34);

        ViewReceiveBtn.setText("View");
        ViewReceiveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewReceiveBtnActionPerformed(evt);
            }
        });
        add(ViewReceiveBtn);
        ViewReceiveBtn.setBounds(680, 550, 58, 34);

        DonateHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Type", "Status", "Received"
            }
        ));
        jScrollPane2.setViewportView(DonateHistoryTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(218, 30, 533, 158);

        ViewDonateBtn.setText("View");
        ViewDonateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDonateBtnActionPerformed(evt);
            }
        });
        add(ViewDonateBtn);
        ViewDonateBtn.setBounds(676, 200, 58, 34);

        jLabel2.setText("Donate History");
        add(jLabel2);
        jLabel2.setBounds(220, 10, 110, 18);

        jLabel3.setText("Receive History");
        add(jLabel3);
        jLabel3.setBounds(230, 330, 140, 18);

        withdrawDonateBtn.setText("Withdraw Donate");
        withdrawDonateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawDonateBtnActionPerformed(evt);
            }
        });
        add(withdrawDonateBtn);
        withdrawDonateBtn.setBounds(457, 200, 140, 34);

        withdrawRequestBtn.setText("Withdraw Request");
        withdrawRequestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawRequestBtnActionPerformed(evt);
            }
        });
        add(withdrawRequestBtn);
        withdrawRequestBtn.setBounds(450, 550, 140, 34);

        PinnedBtn.setText("Pinned");
        PinnedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PinnedBtnActionPerformed(evt);
            }
        });
        add(PinnedBtn);
        PinnedBtn.setBounds(790, 30, 69, 34);

        jButton1.setText("Delete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(660, 600, 66, 34);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Admin/6783831-cute-backgrounds.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        add(jLabel1);
        jLabel1.setBounds(0, 0, 1200, 800);
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BackBtnActionPerformed

    private void ViewReceiveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewReceiveBtnActionPerformed
        // TODO add your handling code here:
        int row = ReceiveHistoryTable.getSelectedRow();
        if(row < 0){
            JOptionPane.showMessageDialog(null, "select a row");
        }else{
            WorkRequest request = (WorkRequest)ReceiveHistoryTable.getValueAt(row, 0);
            ViewGoodsOrderJPanel viewGoodsOrderJPanel = new ViewGoodsOrderJPanel(userProcessContainer,request,system);
            userProcessContainer.add("viewGoodsOrderJPanel", viewGoodsOrderJPanel);

            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_ViewReceiveBtnActionPerformed

    private void ViewDonateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewDonateBtnActionPerformed
        // TODO add your handling code here:
        int row = DonateHistoryTable.getSelectedRow();
        if(row < 0){
            JOptionPane.showMessageDialog(null, "select a row");
        }else{
            WorkRequest request = (WorkRequest)DonateHistoryTable.getValueAt(row, 0);
            ViewGoodsOrderJPanel viewGoodsOrderJPanel = new ViewGoodsOrderJPanel(userProcessContainer,request,system);
            userProcessContainer.add("viewGoodsOrderJPanel", viewGoodsOrderJPanel);

            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_ViewDonateBtnActionPerformed

    private void withdrawDonateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawDonateBtnActionPerformed
        // TODO add your handling code here:
        int selected = DonateHistoryTable.getSelectedRow();
        if(selected < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
        }else{
            WorkRequest request = (WorkRequest)DonateHistoryTable.getValueAt(selected, 0);
            if(request.getStatus() == 2){
                JOptionPane.showMessageDialog(null, "already processed, cannot withdraw!");
                return;
            }else{
                request.getToEnterprise().getWorkQueue().getWorkRequestList().remove(request);
                account.getWorkQueue().getWorkRequestList().remove(request);
                JOptionPane.showMessageDialog(null, "Withdraw Successfully");
                analyse();
                populate();
            }
        }
    }//GEN-LAST:event_withdrawDonateBtnActionPerformed

    private void withdrawRequestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawRequestBtnActionPerformed
        // TODO add your handling code here:
        int selected = ReceiveHistoryTable.getSelectedRow();
        if(selected < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
        }else{
            WorkRequest request = (WorkRequest)ReceiveHistoryTable.getValueAt(selected, 0);
            if(request.getStatus() == 2){
                JOptionPane.showMessageDialog(null, "already processed, cannot withdraw!");
                return;
            }else{
                request.getToEnterprise().getWorkQueue().getWorkRequestList().remove(request);
                account.getWorkQueue().getWorkRequestList().remove(request);
                JOptionPane.showMessageDialog(null, "Withdraw Successfully");
                analyse();
                populate();
            }
        }
    }//GEN-LAST:event_withdrawRequestBtnActionPerformed

    private void PinnedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PinnedBtnActionPerformed
        // TODO add your handling code here:
        JPanel jp = new JPanel();
        JFrame jf = new JFrame();
        jf.setVisible(true);
        jf.setSize(new Dimension(800,600));
        JPanel tmp = new PinRequestJPanel(account);

        JButton close = new JButton("close");
        tmp.add(close);

        jf.setContentPane(tmp);
    }//GEN-LAST:event_PinnedBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
                int selected = ReceiveHistoryTable.getSelectedRow();
        if(selected < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
        }else{
            WorkRequest request = (WorkRequest)ReceiveHistoryTable.getValueAt(selected, 0);
            account.getWorkQueue().getWorkRequestList().remove(request);
            
            for(Enterprise ent: network.getEnterpriseDirectory().getEnterpriseList()){
                for(WorkRequest re: ent.getWorkQueue().getWorkRequestList()){
                    if(re == request){
                        ent.getWorkQueue().getWorkRequestList().remove(re);
                        return;
                    }
                }
            }
            request.getFromEnterprise().getWorkQueue().getWorkRequestList().remove(request);
            request.getToEnterprise().getWorkQueue().getWorkRequestList().remove(request);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtn;
    private javax.swing.JTable DonateHistoryTable;
    private javax.swing.JButton PinnedBtn;
    private javax.swing.JTable ReceiveHistoryTable;
    private javax.swing.JButton ViewDonateBtn;
    private javax.swing.JButton ViewReceiveBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton withdrawDonateBtn;
    private javax.swing.JButton withdrawRequestBtn;
    // End of variables declaration//GEN-END:variables
}
