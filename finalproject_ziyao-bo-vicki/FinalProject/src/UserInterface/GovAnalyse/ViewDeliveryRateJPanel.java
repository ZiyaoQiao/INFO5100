/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.GovAnalyse;

import EcoSystem.EcoSystem;
import Enterprise.DeliveryEnterprise;
import Enterprise.Enterprise;
import Network.Network;
import Organization.Organization;
import Person.UserAccount;
import WorkRequest.ComplainWorkRequest;
import WorkRequest.TransportWorkRequest;
import WorkRequest.WorkRequest;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author yanfei
 */
public class ViewDeliveryRateJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer; 
    EcoSystem system;
    UserAccount account;
    Enterprise enterprise;
    Network network;
    Organization organization;
    /**
     * Creates new form ViewCompliantRateJPanel
     */
    public ViewDeliveryRateJPanel(JPanel userProcessContainer,UserAccount account, Organization organization, Enterprise enterprise, Network network,EcoSystem system) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.system=system;
        this.network = network;
        this.enterprise = enterprise;
        this.account = account;
        this.organization = organization;
        populateCombo();
        populateChart1();
        PreviousBtn.setEnabled(false);
    }
    /**
     * Creates new form GovAnalyseWorkAreaJPanel
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        ChartPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DeliveryTable = new javax.swing.JTable();
        NextBtn = new javax.swing.JButton();
        PreviousBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setLayout(null);

        jLabel2.setText("Some Chart& Graph");
        add(jLabel2);
        jLabel2.setBounds(670, 345, 464, 16);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(60, 597, 75, 29);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(jComboBox1);
        jComboBox1.setBounds(370, 70, 190, 30);

        ChartPanel.setLayout(new java.awt.BorderLayout());
        add(ChartPanel);
        ChartPanel.setBounds(366, 373, 656, 206);

        DeliveryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Distance", "Time", "Price"
            }
        ));
        jScrollPane2.setViewportView(DeliveryTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(367, 130, 660, 160);

        NextBtn.setText("Next Chart");
        NextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextBtnActionPerformed(evt);
            }
        });
        add(NextBtn);
        NextBtn.setBounds(910, 597, 112, 29);

        PreviousBtn.setText("Previous Chart");
        PreviousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviousBtnActionPerformed(evt);
            }
        });
        add(PreviousBtn);
        PreviousBtn.setBounds(366, 597, 135, 29);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Admin/6783831-cute-backgrounds.jpg"))); // NOI18N
        jLabel3.setText("jLabel3");
        add(jLabel3);
        jLabel3.setBounds(0, 0, 1200, 800);
    }// </editor-fold>//GEN-END:initComponents
    public void populateCombo(){
        jComboBox1.removeAllItems();
        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterprise instanceof DeliveryEnterprise)
                jComboBox1.addItem(enterprise);
        }
    }
    
    public void populateTable(){
        Enterprise enterprise = (Enterprise)jComboBox1.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel)DeliveryTable.getModel();
        model.setRowCount(0);
        for(WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()){
            if(request instanceof TransportWorkRequest){
                if(request.getStatus() == 3){
                    Object[] row = new Object[3];
                    row[0] = ((TransportWorkRequest) request).getDistance();
                    row[1] = ((TransportWorkRequest) request).getTime();
                    row[2] = ((TransportWorkRequest) request).getPrice();
                    model.addRow(row);
                }
            }
        }
    }
    
    public void populateChart1(){
        CategoryDataset dataset = getDataSet1();
        JFreeChart chart = ChartFactory.createBarChart3D("Delivery Rate", "Enterprise Name", "Number", dataset, PlotOrientation.VERTICAL,true,false,false);
        
        
        ChartPanel frame = new ChartPanel(chart);
        ChartPanel.add(frame, BorderLayout.CENTER);
        ChartPanel.validate();
    }
    public void populateChart2(){
        CategoryDataset dataset = getDataSet2();
        JFreeChart chart = ChartFactory.createBarChart3D("Speed Rate", "Enterprise Name", "Rate", dataset, PlotOrientation.VERTICAL,true,false,false);
        
        
        ChartPanel frame = new ChartPanel(chart);
        ChartPanel.add(frame, BorderLayout.CENTER);
        ChartPanel.validate();
    }
    
    private CategoryDataset getDataSet1(){
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        class Tuple{
            int total;
            int finished;
        }
        
        HashMap<Enterprise, Tuple> map = new HashMap<Enterprise, Tuple>();
        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterprise instanceof DeliveryEnterprise){
                if(!map.containsKey(enterprise)){
                    Tuple tuple = new Tuple();
                    tuple.total = 0;
                    tuple.finished = 0;
                    map.put(enterprise, tuple);
                }
                for(WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()){
                    if(request instanceof TransportWorkRequest){
                        if(request.getStatus() == 3){
                            Tuple t = map.get(enterprise);
                            t.total++;
                            t.finished++;
                        }else{
                            Tuple t = map.get(enterprise);
                            t.total++;
                        }
                    }
                }
            }
        }
       
        for(Map.Entry<Enterprise, Tuple> entry : map.entrySet()){
            dataset.addValue(entry.getValue().total, "Total Delivery", entry.getKey().toString());
            dataset.addValue(entry.getValue().finished, "Finished Delivery", entry.getKey().toString());
        }
        
        
        return dataset;
    }
    
    private CategoryDataset getDataSet2(){
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        class Tuple{
            double distance;
            double hour;
        }
        
        HashMap<Enterprise, Tuple> map = new HashMap<Enterprise, Tuple>();
        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterprise instanceof DeliveryEnterprise){
                Tuple tuple = new Tuple();
                tuple.distance = 0;
                tuple.hour = 0;
                map.put(enterprise, tuple);
                for(WorkRequest request : enterprise.getWorkQueue().getWorkRequestList()){
                    if(request instanceof TransportWorkRequest){
                        if(request.getStatus() == 3){
                            Tuple t = map.get(enterprise);
                            t.distance += ((TransportWorkRequest) request).getDistance();
                            t.hour += (double)((((TransportWorkRequest) request).getTime().getTime() - request.getRequestDate().getTime())/(1000*60*60));
                            map.put(enterprise, tuple);
                        }
                    }
                }
            }
        }
       
        for(Map.Entry<Enterprise, Tuple> entry : map.entrySet()){
            dataset.addValue((entry.getValue().distance/entry.getValue().hour), "Total Distance/Total Hour", entry.getKey().toString());
        }
        
        
        return dataset;
    }
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void NextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextBtnActionPerformed
        // TODO add your handling code here:
        populateChart2();
        PreviousBtn.setEnabled(true);
        NextBtn.setEnabled(false);
    }//GEN-LAST:event_NextBtnActionPerformed

    private void PreviousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousBtnActionPerformed
        // TODO add your handling code here:
        populateChart1();
        PreviousBtn.setEnabled(false);
        NextBtn.setEnabled(true);
    }//GEN-LAST:event_PreviousBtnActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        if(jComboBox1.getSelectedItem() != null)
            populateTable();
    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChartPanel;
    private javax.swing.JTable DeliveryTable;
    private javax.swing.JButton NextBtn;
    private javax.swing.JButton PreviousBtn;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
